{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL;\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n  baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n  baseURL = 'http://127.0.0.1:8000';\n}\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(config => {\n  if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.getPosts = async params => {\n      try {\n        const response = await api.get('/posts/', {\n          params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n    this.addPost = async postBody => {\n      const formData = new FormData();\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n      try {\n        const response = await api.post('/posts/add/', formData);\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n    this.deletePost = async id => {\n      try {\n        return await api.delete(`/posts/delete/${id}/`);\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n    ///////////////ITEM//////////////\n    this.getItems = async category => {\n      let url = '/items/';\n      if (category) {\n        url += '?category=' + category;\n      }\n      const items = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return items;\n    };\n    ///////////////REVIEW//////////////\n    this.getReviews = async item_id => {\n      let url = '/reviews?item_id=' + item_id;\n      const reviews = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n    ///////////////WRITE REVIEW//////////////\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append(\"item\", item_id);\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"like_count\", like_count);\n      const savedReview = await api.post(\"/reviews/add\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n}","map":{"version":3,"names":["axios","LOGIN_USER_KEY","baseURL","process","env","REACT_APP_ENVIRONMENT","REACT_APP_API_BASE_URL","api","create","headers","interceptors","request","use","config","requireToken","localStorage","getItem","common","JSON","parse","token","err","console","error","API","constructor","getPosts","params","response","get","data","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getItems","category","url","items","then","catch","getReviews","item_id","reviews","writeReview","name","body","like_count","savedReview"],"sources":["/Users/perryharris/Desktop/Projects/project-/techis-wd-forum-django-react/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n    baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n    baseURL = 'http://127.0.0.1:8000';\n}\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(\n    config => {\n        if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    getPosts = async params => {\n        try {\n            const response = await api.get('/posts/', { params });\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    addPost = async postBody => {\n        const formData = new FormData();\n\n        for (const key in postBody) {\n            formData.append(key, postBody[key]);\n        }\n\n        try {\n            const response = await api.post('/posts/add/', formData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    deletePost = async id => {\n        try {\n            return await api.delete(`/posts/delete/${id}/`);\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n ///////////////ITEM//////////////\n\n getItems = async category => {\n    let url = '/items/';\n    if (category) {\n        url += '?category=' + category;\n    }\n    const items = await api\n        .get(url)\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => {\n            throw new Error(error);\n        });\n    return items;\n};\n    ///////////////REVIEW//////////////\n\n    getReviews = async item_id => {\n        let url = '/reviews?item_id=' + item_id;\n        const reviews = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return reviews;\n    };\n    ///////////////WRITE REVIEW//////////////\n\n    writeReview = async (item_id, name, body, like_count) => {\n        const formData = new FormData();\n        formData.append(\"item\", item_id);\n        formData.append(\"name\", name);\n        formData.append(\"body\", body);\n        formData.append(\"like_count\", like_count);\n        const savedReview = await api\n          .post(\"/reviews/add\", formData)\n          .then((response) => {\n            return response.data;\n          })\n          .catch((error) => {\n            throw new Error(error);\n          });\n        return savedReview;\n      };\n    \n    }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}